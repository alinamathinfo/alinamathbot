import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import config
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect("students.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute("""
    CREATE TABLE IF NOT EXISTS students (
        id INTEGER PRIMARY KEY,
        tg_id INTEGER UNIQUE,
        name TEXT
    )
""")

cursor.execute("""
    CREATE TABLE IF NOT EXISTS variants (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        variant_name TEXT UNIQUE
    )
""")

cursor.execute("""
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        variant_id INTEGER,
        task_number INTEGER,
        image_path TEXT,
        correct_answer TEXT,
        FOREIGN KEY (variant_id) REFERENCES variants(id)
    )
""")

cursor.execute("""
    CREATE TABLE IF NOT EXISTS user_answers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        variant_id INTEGER,
        task_number INTEGER,
        answer TEXT,
        is_correct BOOLEAN,
        FOREIGN KEY (user_id) REFERENCES students(tg_id),
        FOREIGN KEY (variant_id) REFERENCES variants(id)
    )
""")
conn.commit()

logging.info("–¢–∞–±–ª–∏—Ü—ã –ë–î —Å–æ–∑–¥–∞–Ω—ã.")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = cursor.fetchall()
logging.info(f"–¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ: {tables}")

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
@dp.message(lambda message: message.text == "üè† –ö–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º")
async def back_to_main_menu(message: types.Message):
    await message.answer("–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=student_keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞
student_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"), KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")],
        [KeyboardButton(text="–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")],
        [KeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ")]
    ],
    resize_keyboard=True
)



# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–≤—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞)
subject_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")],
        [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")],
        [KeyboardButton(text="üè† –ö–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ (–≤—ã–±–æ—Ä —á–∞—Å—Ç–∏)
math_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="1 —á–∞—Å—Ç—å")],
        [KeyboardButton(text="2 —á–∞—Å—Ç—å")],
        [KeyboardButton(text="üè† –ö–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º")]
    ],
    resize_keyboard=True
)
@dp.message(Command("reset"), StateFilter(None))
async def reset_state(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–Ω–æ–≤–æ –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞ ---
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –±–æ—Ç. –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /register")





import logging
logging.basicConfig(level=logging.INFO)
from aiogram import F

logging.info("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è /results...")
@dp.message(Command("results"), F.text.startswith("/results"))
async def show_results(message: types.Message):
    logging.info("–§—É–Ω–∫—Ü–∏—è show_results –≤—ã–∑–≤–∞–Ω–∞!")

    if message.from_user.id != ADMIN_ID:
        print("–û—à–∏–±–∫–∞: –ù–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ user_answers
    cursor.execute("SELECT COUNT(*) FROM user_answers")
    count_user_answers = cursor.fetchone()[0]
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ user_answers: {count_user_answers}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ tasks
    cursor.execute("SELECT COUNT(*) FROM tasks")
    count_tasks = cursor.fetchone()[0]
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ tasks: {count_tasks}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ students
    cursor.execute("SELECT COUNT(*) FROM students")
    count_students = cursor.fetchone()[0]
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ students: {count_students}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ variants
    cursor.execute("SELECT COUNT(*) FROM variants")
    count_variants = cursor.fetchone()[0]
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ variants: {count_variants}")

    print("–ó–∞–ø—Ä–æ—Å –≤ –ë–î...")
    cursor.execute("""
        SELECT students.name, variants.variant_name, 
               (SELECT COUNT(*) FROM tasks WHERE tasks.variant_id = variants.id) AS total_tasks,
               SUM(CASE WHEN user_answers.answer = tasks.correct_answer THEN 1 ELSE 0 END) as correct_answers
        FROM variants
        JOIN students ON students.tg_id = user_answers.user_id
        LEFT JOIN user_answers ON variants.id = user_answers.variant_id
        LEFT JOIN tasks ON tasks.variant_id = variants.id AND tasks.task_number = user_answers.task_number
        GROUP BY students.name, variants.variant_name, total_tasks;
    """)

    results = cursor.fetchall()
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞: {results}")

    if not results:
        print("–û—à–∏–±–∫–∞: –í –ë–î –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
    else:
        text = "\n".join([f"{name} ‚Äî {variant}: {correct}/{total}" for name, variant, total, correct in results])
        await message.answer(f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤:*\n{text}", parse_mode="Markdown")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@dp.message(Command("register"))
async def register(message: types.Message, state: FSMContext):
    cursor.execute("SELECT * FROM students WHERE tg_id = ?", (message.from_user.id,))
    user = cursor.fetchone()

    if user:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=student_keyboard)
    else:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è:")
        await state.set_state(RegisterState.waiting_for_name)
class RegisterState(StatesGroup):
    waiting_for_name = State()
@dp.message(RegisterState.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    cursor.execute("INSERT INTO students (tg_id, name) VALUES (?, ?)", (message.from_user.id, name))
    conn.commit()

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ", reply_markup=student_keyboard)
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ



# –ü–æ–ª—É—á–∞–µ–º –∏–º—è —É—á–µ–Ω–∏–∫–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    cursor.execute("INSERT INTO students (tg_id, name) VALUES (?, ?)", (message.from_user.id, name))
    conn.commit()

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ", reply_markup=subject_keyboard)

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
@dp.message(lambda message: message.text == "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")
async def math_selected(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —á–∞—Å—Ç—å:", reply_markup=math_keyboard)

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (–∞–¥–º–∏–Ω) ---
ADMIN_ID = 156985269

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import F

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
from aiogram.fsm.state import State, StatesGroup

class SolveVariantState(StatesGroup):
    solving_task = State()

class AddVariantState(StatesGroup):
    waiting_for_variant_name = State()
    waiting_for_images = State()
    waiting_for_answers = State()

# –ê–¥–º–∏–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
@dp.message(Command("add_variant"))
async def add_variant(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await state.clear()

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞:")
    await state.set_state(AddVariantState.waiting_for_variant_name)

# –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
@dp.message(AddVariantState.waiting_for_variant_name)
async def process_variant_name(message: types.Message, state: FSMContext):
    variant_name = message.text.strip()

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO variants (variant_name) VALUES (?)", (variant_name,))
    conn.commit()

    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    cursor.execute("SELECT id FROM variants WHERE variant_name = ?", (variant_name,))
    variant_id = cursor.fetchone()[0]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ FSM
    await state.update_data(variant_id=variant_id, task_number=1)

    await message.answer(f"–í–∞—Ä–∏–∞–Ω—Ç '{variant_name}' –¥–æ–±–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å 12 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–¥–Ω–æ –∑–∞ –¥—Ä—É–≥–∏–º).")
    await state.set_state(AddVariantState.waiting_for_images)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
import os
@dp.message(AddVariantState.waiting_for_images)
async def process_task_images(message: types.Message, state: FSMContext):
    data = await state.get_data()
    variant_id = data["variant_id"]
    task_number = data["task_number"]

    images_dir = "images"
    if not os.path.exists(images_dir):
        os.makedirs(images_dir)

    local_path = f"{images_dir}/variant_{variant_id}_task_{task_number}.jpg"

    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path

    await bot.download_file(file_path, local_path)

    cursor.execute(
        "INSERT INTO tasks (variant_id, task_number, image_path) VALUES (?, ?, ?)",
        (variant_id, task_number, local_path)
    )
    conn.commit()

    if task_number < 12:
        await state.update_data(task_number=task_number + 1)
        await message.answer(f"–ó–∞–¥–∞–Ω–∏–µ {task_number} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    else:
        await message.answer("‚úÖ –í—Å–µ 12 –∑–∞–¥–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏.")
        await state.update_data(task_number=1) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await state.set_state(AddVariantState.waiting_for_answers)
        print(await state.get_state())  # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–æ—Å—å


# --- –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É—á–µ–Ω–∏–∫–æ–º ---
@dp.message(lambda message: message.text == "1 —á–∞—Å—Ç—å")
async def choose_variant(message: types.Message):
    cursor.execute("SELECT v.id, v.variant_name FROM variants v")
    variants = cursor.fetchall()

    if not variants:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return

    variant_buttons = []
    for variant_id, variant_name in variants:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        cursor.execute("""
            SELECT COUNT(*) FROM user_answers ua
            JOIN tasks t ON ua.variant_id = t.variant_id AND ua.task_number = t.task_number
            WHERE ua.user_id = ? AND ua.variant_id = ? AND ua.answer = t.correct_answer
        """, (message.from_user.id, variant_id))
        correct_count = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ –∑–∞–¥–∞–Ω–∏–π
        cursor.execute("SELECT COUNT(*) FROM tasks WHERE variant_id = ?", (variant_id,))
        total_tasks = cursor.fetchone()[0]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        if correct_count == 0 and total_tasks > 0:
            status = "‚ùå"  # –ù–µ —Ä–µ—à—ë–Ω –∏–ª–∏ –≤—Å–µ –æ—à–∏–±–∫–∏
        else:
            status = f"‚úÖ {correct_count}/{total_tasks}"

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –µ–≥–æ —Å—Ç–∞—Ç—É—Å–æ–º
        variant_buttons.append([KeyboardButton(text=f"{variant_name} ({status})")])

    # **–ó–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üè† –ö–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º"**
    variant_buttons.append([KeyboardButton(text="üè† –ö–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º")])

    variant_keyboard = ReplyKeyboardMarkup(keyboard=variant_buttons, resize_keyboard=True)
    await message.answer("–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=variant_keyboard)



@dp.message(lambda message: message.text == "2 —á–∞—Å—Ç—å")
async def part_2_selected(message: types.Message):
    await message.answer("–¢—ã –≤—ã–±—Ä–∞–ª 2 —á–∞—Å—Ç—å! (–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)")


async def send_task(message, state: FSMContext):
    data = await state.get_data()
    tasks = data["tasks"]
    current_task = data["current_task"]

    if current_task < len(tasks):
        task_number, image_path = tasks[current_task]

        from aiogram.types import FSInputFile
        photo = FSInputFile(image_path)  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç FSInputFile

        await message.answer_photo(photo=photo, caption=f"–ó–∞–¥–∞–Ω–∏–µ {task_number}")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]], resize_keyboard=True
        ))

        # ‚úÖ –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!
        await state.set_state(SolveVariantState.solving_task)

    else:
        await message.answer("‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã! –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        await check_results(message, state)
        await state.clear()


@dp.message(SolveVariantState.solving_task)  # ‚úÖ –§–∏–ª—å—Ç—Ä –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tasks = data["tasks"]
    current_task = data["current_task"]
    variant_id = data["variant_id"]

    task_number, image_path = tasks[current_task]

    # –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –Ω–∞–∂–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –∏–¥—ë–º –¥–∞–ª—å—à–µ
    if message.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(current_task=current_task + 1)
        await send_task(message, state)
        return

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞
    cursor.execute(
        "INSERT INTO user_answers (user_id, variant_id, task_number, answer) VALUES (?, ?, ?, ?)",
        (message.from_user.id, variant_id, task_number, message.text.strip())
    )
    conn.commit()

    # ‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
    await state.update_data(current_task=current_task + 1)
    await send_task(message, state)

import logging
logging.basicConfig(level=logging.INFO)

from aiogram.filters.state import StateFilter  # –î–æ–±–∞–≤—å —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç!

@dp.message(StateFilter(AddVariantState.waiting_for_answers))  # –§–∏–ª—å—Ç—Ä –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!
async def process_correct_answers(message: types.Message, state: FSMContext):
    logging.info(f"–í–´–ó–û–í –û–ë–†–ê–ë–û–¢–ö–ò –û–¢–í–ï–¢–ê: {message.text}, –°–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

    data = await state.get_data()
    variant_id = data.get("variant_id")
    task_number = data.get("task_number", 1)

    logging.info(f"–ü–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç: {message.text} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_number}, –≤–∞—Ä–∏–∞–Ω—Ç {variant_id}")
    print(await state.get_state())  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    correct_answer = message.text.strip()

    cursor.execute(
        "UPDATE tasks SET correct_answer = ? WHERE variant_id = ? AND task_number = ?",
        (correct_answer, variant_id, task_number)
    )
    conn.commit()

    if task_number < 12:
        await state.update_data(task_number=task_number + 1)
        await message.answer(f"–û—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_number} —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π.")
    else:
        await message.answer("‚úÖ –í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í–∞—Ä–∏–∞–Ω—Ç –≥–æ—Ç–æ–≤ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤.")
        await state.clear()

import re
# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—á–µ–Ω–∏–∫–∞
@dp.message(lambda message: message.text == "–ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
async def show_user_results(message: types.Message):
    cursor.execute("""
        SELECT v.variant_name, 
               (SELECT COUNT(*) FROM tasks WHERE tasks.variant_id = v.id) AS total_tasks,
               COUNT(a.id) as total_answers,
               SUM(CASE WHEN a.answer = t.correct_answer THEN 1 ELSE 0 END) as correct_answers
        FROM variants v
        LEFT JOIN user_answers a ON v.id = a.variant_id AND a.user_id = ?
        LEFT JOIN tasks t ON t.variant_id = v.id AND t.task_number = a.task_number
        WHERE v.id IN (SELECT variant_id FROM user_answers WHERE user_id = ?)
        GROUP BY v.variant_name, total_tasks;
    """, (message.from_user.id, message.from_user.id))
    results = cursor.fetchall()

    if not results:
        await message.answer("–¢—ã –ø–æ–∫–∞ –Ω–µ —Ä–µ—à–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
    else:
        text = "\n".join([f"{variant} ‚Äî {correct}/{total}" for variant, total, answered, correct in results])
        await message.answer(f"üìä *–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n{text}", parse_mode="Markdown")


# –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message(lambda message: message.text == "–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
async def reset_state(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–Ω–æ–≤–æ –≤—ã–±–∏—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã.", reply_markup=student_keyboard)


async def show_variant_results(message: types.Message, variant_id: int):
    cursor.execute("SELECT task_number, correct_answer FROM tasks WHERE variant_id = ?", (variant_id,))
    correct_answers = {task_number: answer for task_number, answer in cursor.fetchall()}

    cursor.execute("""
        SELECT task_number, answer FROM user_answers
        WHERE user_id = ? AND variant_id = ?
    """, (message.from_user.id, variant_id))
    user_answers = {task_number: answer for task_number, answer in cursor.fetchall()}

    correct_count = 0
    incorrect_tasks = []
    result_text = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ—à–µ–Ω–∏—è:*\n"

    for task_number, correct_answer in correct_answers.items():
        user_answer = user_answers.get(task_number, "‚Äî")
        is_correct = (user_answer == correct_answer)

        if is_correct:
            correct_count += 1
            result_text += f"‚úÖ {task_number}. *{user_answer}* (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)\n"
        else:
            result_text += f"‚ùå {task_number}. *{user_answer}* (–Ω–µ–≤–µ—Ä–Ω–æ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: {correct_answer})\n"
            incorrect_tasks.append(task_number)

    result_text += f"\nüéØ *–ò—Ç–æ–≥:* {correct_count} / {len(correct_answers)} –∑–∞–¥–∞–Ω–∏–π –≤–µ—Ä–Ω–æ."
    await message.answer(result_text, parse_mode="Markdown")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∑–∞–¥–∞–Ω–∏–π —Å –æ—à–∏–±–∫–∞–º–∏
    if incorrect_tasks:
        await message.answer("üìå –í–æ—Ç –∑–∞–¥–∞–Ω–∏—è, –≥–¥–µ –±—ã–ª–∏ –æ—à–∏–±–∫–∏:")
        for task_number in incorrect_tasks:
            cursor.execute("""
                SELECT image_path FROM tasks
                WHERE variant_id = ? AND task_number = ?
            """, (variant_id, task_number))
            image_path = cursor.fetchone()

            if image_path:
                from aiogram.types import FSInputFile
                await message.answer_photo(FSInputFile(image_path[0]), caption=f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞–Ω–∏–∏ {task_number}")


async def start_test(message: types.Message, state: FSMContext, variant_id: int):
    cursor.execute("SELECT task_number, image_path FROM tasks WHERE variant_id = ? ORDER BY task_number", (variant_id,))
    tasks = cursor.fetchall()

    if not tasks:
        await message.answer("–≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    await state.update_data(variant_id=variant_id, tasks=tasks, current_task=0)
    await send_task(message, state)
    await state.set_state(SolveVariantState.solving_task)






# –ö–æ–º–∞–Ω–¥–∞ /students –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID)
ADMIN_ID = 156985269  # –¢–≤–æ–π Telegram ID

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
class SolveVariantState(StatesGroup):
    solving_task = State()

@dp.message()
async def start_variant(message: types.Message, state: FSMContext):
    variant_name = message.text.split(" (")[0]  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å (‚ùå –∏–ª–∏ ‚úÖ)
    logging.info(f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: {variant_name}")

    cursor.execute("SELECT id FROM variants WHERE variant_name = ?", (variant_name,))
    variant = cursor.fetchone()

    if not variant:
        await message.answer("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    variant_id = variant[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ—à–∞–ª –ª–∏ —É—á–µ–Ω–∏–∫ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
    cursor.execute("""
        SELECT COUNT(*) FROM user_answers
        WHERE user_id = ? AND variant_id = ?
    """, (message.from_user.id, variant_id))
    answers_count = cursor.fetchone()[0]

    if answers_count > 0:
        # –£—á–µ–Ω–∏–∫ —É–∂–µ —Ä–µ—à–∞–ª —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_variant_results(message, variant_id)


    else:
        # –£—á–µ–Ω–∏–∫ –µ—â–µ –Ω–µ —Ä–µ—à–∞–ª ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        await start_test(message, state, variant_id)


async def send_task(message, state):
    data = await state.get_data()
    tasks = data["tasks"]
    current_task = data["current_task"]

    if current_task < len(tasks):
        task_number, image_path = tasks[current_task]
        from aiogram.types import FSInputFile  # –î–æ–±–∞–≤—å –∏–º–ø–æ—Ä—Ç

        photo = FSInputFile(image_path)  # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç FSInputFile
        await message.answer_photo(photo=photo, caption=f"–ó–∞–¥–∞–Ω–∏–µ {task_number}")

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]], resize_keyboard=True
        ))
    else:
        await message.answer("‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã! –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
        await check_results(message, state)
        await state.clear()

@dp.message(SolveVariantState.solving_task)
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tasks = data["tasks"]
    current_task = data["current_task"]
    variant_id = data["variant_id"]

    task_number, image_path = tasks[current_task]

    # –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –Ω–∞–∂–∞–ª "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", –∏–¥—ë–º –¥–∞–ª—å—à–µ
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(current_task=current_task + 1)
        await send_task(message, state)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫–∞
    cursor.execute(
        "INSERT INTO user_answers (user_id, variant_id, task_number, answer) VALUES (?, ?, ?, ?)",
        (message.from_user.id, variant_id, task_number, message.text)
    )
    conn.commit()

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
    await state.update_data(current_task=current_task + 1)
    await send_task(message, state)

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
@dp.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    subject_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞")],
            [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞")],
            [KeyboardButton(text="üè† –ö–æ –≤—Å–µ–º –¥–µ–π—Å—Ç–≤–∏—è–º")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=subject_keyboard)

async def check_results(message, state):
    data = await state.get_data()
    variant_id = data["variant_id"]

    cursor.execute("SELECT task_number, correct_answer FROM tasks WHERE variant_id = ?", (variant_id,))
    correct_answers = {task_number: answer for task_number, answer in cursor.fetchall()}

    cursor.execute(
        "SELECT task_number, answer FROM user_answers WHERE user_id = ? AND variant_id = ?",
        (message.from_user.id, variant_id)
    )
    user_answers = {task_number: answer for task_number, answer in cursor.fetchall()}

    correct_count = 0
    result_text = "üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ—à–µ–Ω–∏—è:*\n"

    for task_number, correct_answer in correct_answers.items():
        user_answer = user_answers.get(task_number, "‚Äî")
        is_correct = (user_answer == correct_answer)

        if is_correct:
            correct_count += 1
            result_text += f"‚úÖ {task_number}. *{user_answer}* (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)\n"
        else:
            result_text += f"‚ùå {task_number}. *{user_answer}* (–Ω–µ–≤–µ—Ä–Ω–æ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: {correct_answer})\n"

    result_text += f"\nüéØ *–ò—Ç–æ–≥:* {correct_count} / {len(correct_answers)} –∑–∞–¥–∞–Ω–∏–π –≤–µ—Ä–Ω–æ."

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    main_menu_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

    await message.answer(result_text, parse_mode="Markdown", reply_markup=main_menu_keyboard)
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞


from aiogram.filters import StateFilter  # –î–æ–±–∞–≤—å –∏–º–ø–æ—Ä—Ç


@dp.message(Command("students"))
async def show_students(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    cursor.execute("SELECT name FROM students")
    students = cursor.fetchall()

    if not students:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.")
    else:
        text = "\n".join([f"- {name}" for (name,) in students])
        await message.answer(f"–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n{text}")



@dp.message(lambda message: not message.text.startswith("/"))
async def start_variant(message: types.Message, state: FSMContext):
    variant_name = message.text.split(" (")[0]  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
    logging.info(f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç: {variant_name}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –ë–î
    cursor.execute("SELECT id FROM variants WHERE variant_name = ?", (variant_name,))
    variant = cursor.fetchone()

    if not variant:
        await message.answer("–¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    variant_id = variant[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ—à–∞–ª –ª–∏ —É—á–µ–Ω–∏–∫ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
    cursor.execute("""
        SELECT COUNT(*) FROM user_answers
        WHERE user_id = ? AND variant_id = ?
    """, (message.from_user.id, variant_id))
    answers_count = cursor.fetchone()[0]

    if answers_count > 0:
        # –£—á–µ–Ω–∏–∫ —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç ‚Äì —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await show_results(message, variant_id)
    else:
        # –£—á–µ–Ω–∏–∫ –µ—â–µ –Ω–µ —Ä–µ—à–∞–ª ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        await start_test(message, state, variant_id)




# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
s = []

